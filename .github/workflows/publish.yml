name: Release Vivid

on:
  push

jobs:
  build:
    if: ${{ false }}
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup NodeJS 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Install yarn
        run: npm install -g yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache yarn dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: vivid-cache-yarn-${{ hashFiles('**/package.json') }}
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        env:
          yarn_always_auth: true,
          yarn__auth: ${{ secrets.ARTIFACTORY_AUTH_TOKEN }}
          yarn_registry: "https://vonagecc.jfrog.io/vonagecc/api/npm/npm/"
        run: yarn install
      - run: yarn compile
      - uses: 'actions/upload-artifact@v2'
        with:
          name: vivid-release-candidate-${{ github.sha }}
          path: ${{ github.workspace }}

  publish:
    if: ${{ true }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_VIVID_DEMO_PROD_ACCESS }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_VIVID_DEMO_PROD_SECRET }}
    runs-on: ubuntu-18.04
    concurrency: ${{ github.workflow }}
    strategy:
      matrix:
        registry:
          - github
          - npm
        include:
          - registry: github
            token: ${{ secret.GITHUB_TOKEN }}
            host: npm.pkg.github.com
          - registry: npm
            token: ${{ secret.NPM_AUTH_TOKEN }}
            host: registry.npmjs.org
    steps:
      - env:
          NPM_CONFIG_REGISTRY: https://:${{ matrix.token }}@${{ matrix.host }}
        run: npm info @vonage/vwc-button --verbose


#      - run: echo registry=https://npm.pkg.github.com/ > .npmrc
#      - run: echo //npm.pkg.github.com/:_authToken=${GITHUB_TOKEN} >> .npmrc
#      - run: yarn lerna publish from-package --no-git-reset --registry https://npm.pkg.github.com --yes --no-push --loglevel verbose
#      - run: npm publish $(node ./scripts/vivid-all-package-generator)
#        continue-on-error: true
#      - run: echo registry=https://registry.npmjs.org/ > .npmrc
#      - run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} >> .npmrc
#      - run: yarn lerna publish from-package --no-git-reset --registry https://registry.npmjs.org --yes --no-push --loglevel verbose
#      - run: npm publish $(node ./scripts/vivid-all-package-generator)
#        continue-on-error: true
#
#      # Notify community
#      - name: Notify slack
#        run: git log --format=oneline --decorate=short | node ./scripts/release_announcer --slackHookUrl="${{ secrets.SLACK_WEBHOOK }}"
#
#      # Build and deploy showcase
#      - name: Build storybook
#        run: yarn storybook:build
#
#      - name: Create deploy timestamp/version
#        run: echo "STORYBOOK_DEPLOY_TIMESTAMP=$(jq -r '.timestamp' ./.storybook/static/build-details.json)" >> $GITHUB_ENV
#
#      - name: Deploy showcase versioned as ${{ env.STORYBOOK_DEPLOY_TIMESTAMP }}
#        run: aws s3 sync ./.out/ s3://${{ secrets.AWS_VIVID_DEMO_PROD_BUCKET }}/${{ env.STORYBOOK_DEPLOY_TIMESTAMP }}
#
#      - name: Update CloudFront distribution root object ${{ env.STORYBOOK_DEPLOY_TIMESTAMP }}
#        run: aws cloudfront update-distribution --id ${{ secrets.AWS_VIVID_DEMO_PROD_DISTRIBUTION }} --default-root-object ${{ env.STORYBOOK_DEPLOY_TIMESTAMP }}/index.html
#
#      - name: Invalidate CloudFront distribution root object's cache
#        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_VIVID_DEMO_PROD_DISTRIBUTION }} --paths "/"
