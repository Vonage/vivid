#!/usr/bin/env node
import path from "path";
import kefir from "kefir";
import aws from "aws-sdk";
import parseArgs from "minimist";
import { createHash } from "crypto";
import { readdir, readFile, writeFile } from "fs";

const
	S3_UPLOAD_CONCURRENCY = 10,
	DEFAULT_BASE_URL = "https://d1zxmm6snown09.cloudfront.net",  //Dev
	DEFAULT_OUTPUT_FOLDER = "./src",
	DEFAULT_ICON_FOLDER = "./build/icon";

const
	{ awsAccessKey, awsAccessSecret, awsBucketName, iconFolder = DEFAULT_ICON_FOLDER, baseUrl = DEFAULT_BASE_URL, outputFolder = DEFAULT_OUTPUT_FOLDER } = parseArgs(process.argv.slice(2)),
	s3 = new aws.S3({ secretAccessKey: awsAccessSecret, accessKeyId: awsAccessKey }),
	log = (message)=> console.log(["✓", message].join(' ')),
	warn = (message)=> console.warn(["✘", message].join(' '));

const
	baseDir = (filename)=> path.resolve(...[iconFolder, filename].filter(Boolean)),
	sha256 = (text)=>{
		const hasher = createHash('sha256');
		hasher.update(text);
		return hasher.digest('hex');
	};

const iconStream = kefir
	.fromNodeCallback((cb)=> readdir(baseDir(), cb))
	.flatten()
	.filter((filename)=> path.extname(filename.toLowerCase()) === ".svg")
	.map(baseDir)
	.flatMap((filename)=> {
		return kefir
			.fromNodeCallback((cb)=> readFile(filename, 'utf8', cb))
			.map((content)=> ({ content, filename }))
	});

const createAwsResolver = (iconStream)=>
	iconStream
		.flatMapConcurLimit(
			({ filename, content })=> {
				const hash = sha256(content);
				return kefir
					.fromNodeCallback((cb) => s3.upload({
						Bucket: awsBucketName,
						Key: [sha256(content), "svg"].join('.'),
						Body: content,
						ContentType: "image/svg+xml"
					}, cb))
					.map(()=> {
						log(`${path.basename(filename)} uploaded successfully`);
						return { hash, filename };
					});
			}
			, S3_UPLOAD_CONCURRENCY)
		.scan((manifest, { filename, hash })=> Object.assign(manifest, { [filename.match(/([^/]+)\..+$/)[1]]: [hash, "svg"].join('.') }), {})
		.last()
		.map((resourceMap)=> {
			return [
				`const resourceMap = ${JSON.stringify(resourceMap)};`,
				`export default function(iconId){ const resourceLocation = resourceMap[iconId]; return resourceLocation ? fetch(["${baseUrl}", resourceLocation].join('/')).then((res)=> res.text()) : Promise.reject("Icon not found"); };`
			].join('\n');
		});

iconStream
	.thru(createAwsResolver)
	.takeErrors(1)
	.flatMap((code)=> kefir.fromNodeCallback((cb)=> writeFile(path.resolve(process.cwd(), outputFolder, 'icon-resolve.autogenerated.js'), code, cb)))
	.map(()=> `Resolver created successfully`)
	.onValue(log)
	.onError((message)=> {
		warn(message);
		process.exit(1);
	});