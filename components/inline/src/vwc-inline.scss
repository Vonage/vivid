@use 'sass:map';

$items-min-inline-size-v-name: --items-min-inline-size;
$items-spacing-v-name: --items-spacing;
$inline-gutters-v-name: --inline-gutters;
$auto-sizing: --auto-sizing;

/* #region SIZE */
$items-min-inline-sizes: (
	sm: 10rem,
	md: 20rem,
	lg: 30rem,
);

/* #region SPACEING */
$items-spacings: (
	xs: 16px,
	md: 24px,
	xl: 32px,
);

@each $key, $value in $items-min-inline-sizes {
	:host([column-basis="#{$key}"i]) {
		.layout {
			#{$items-min-inline-size-v-name}: $value;
		}
	}
}
/* #endregion */

@each $key, $value in $items-spacings {
	:host([column-spacing="#{$key}"i]) {
		.layout {
			#{$items-spacing-v-name}: $value;
		}
	}
}
/* #endregion */

@each $key, $value in $items-spacings {
	:host([inline-gutters="#{$key}"i]) {
		.layout {
			#{$inline-gutters-v-name}: $value;
		}
	}
}
/* #endregion */

.layout {
	:host & {
		display: grid;
		margin: var(#{$inline-gutters-v-name}, #{map.get($items-spacings, md)});
		gap: var(#{$items-spacing-v-name}, #{map.get($items-spacings, md)});
		grid-auto-rows: min-content;
		grid-template-columns: repeat(
			var(#{$auto-sizing}),
			minmax(var(#{$items-min-inline-size-v-name}, #{map.get($items-min-inline-sizes, lg)}), 1fr)
		);
	}

	:host(:not(template)) &,
	:host([template="fit"i]) & {
		#{$auto-sizing}: auto-fit;
	}
	:host([auto-sizing="fill"i]) & {
		#{$auto-sizing}: auto-fill;
	}
	:host([column-basis="block"i]) & {
		grid-template-columns: 1fr;
	}
}
