@use 'sass:map';

$items-min-inline-size-v-name: --items-min-inline-size;
$items-spacing-v-name: --items-spacing;

$inline-template: --inline-template;

/* #region SIZE */
$items-min-inline-sizes: (
	'sm': 10rem,
	'md': 20rem,
	'lg': 30rem,
);

@each $key, $value in $items-min-inline-sizes {
	:host([column-basis='#{$key}'i]) {
		#{$items-min-inline-size-v-name}: $value;
	}
}
/* #endregion */

/* #region SPACING */
$items-spacings: (
	// ! hardcoded values should be defined and auto-generated to, and by, design tokens
	'md': 24px,
	'xl': 32px
);

@each $key, $value in $items-spacings {
	:host([column-spacing='#{$key}'i]) {
		#{$items-spacing-v-name}: $value;
	}
}
/* #endregion */

:host {
	display: grid;
	width: 100%;
	gap: var(#{$items-spacing-v-name}, #{map.get($items-spacings, md)});
	grid-auto-rows: min-content;
	grid-template-columns: repeat(
		var(#{$inline-template}),
		minmax(
			var(
				#{$items-min-inline-size-v-name},
				#{map.get($items-min-inline-sizes, lg)}
			),
			1fr
		)
	);
	inline-size: 100%;
}

:host([column-basis="block"i]) {
	grid-template-columns: 1fr;
}

:host(:not(template)),
:host([template="fit"i]) {
	#{$inline-template}: auto-fit;
}

:host([template="fill"i]) {
	#{$inline-template}: auto-fill;
}
