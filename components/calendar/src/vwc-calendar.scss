@use 'partials/vwc-calendar-variables' as calendar-variables;
@use '@vonage/vvd-design-tokens/build/scss/semantic-variables/scheme-variables';
@use '@vonage/vvd-typography/scss/typography';

ol {
	padding: 0;
	margin: 0;
	list-style: none;
}

.container {
	display: grid;
	width: max(100%, 500px);
	margin: auto;
	grid-template-areas:
		'. headline'
		'time calendar';
	grid-template-columns: min-content auto;
}

.time {
	display: grid;
	grid-area: time;
	grid-template-rows: repeat(calendar-variables.$total-rows, 1fr);
	margin-inline-end: 15px;
	> li {
		display: flex;
		align-items: flex-end;
		justify-content: flex-end;
		> time {
			@include typography.typography-cat-shorthand('caption');
			font-size: small;
			line-height: 1;
			text-transform: uppercase;
			white-space: nowrap;
		}
	}
}

.headline {
	display: grid;
	grid-area: headline;
	grid-template-columns: repeat(calendar-variables.$total-columns, 1fr);
	> li > time {
		@include typography.typography-cat-shorthand('caption');
		text-transform: uppercase;
	}
}

.calendar {
	display: grid;
	overflow: hidden;
	// background-color: var(#{scheme-variables.$vvd-color-neutral-20}, rgb(128, 128, 128));
	border-radius: 6px;
	box-shadow: 0 0 3.64752px rgba(0, 0, 0, 0.15);
	counter-reset: listing;
	gap: 1px;
	grid-area: calendar;
	grid-auto-flow: column;
	grid-template: repeat(calendar-variables.$total-rows * calendar-variables.$fraction, 1fr) / repeat(
		calendar-variables.$total-columns,
		1fr
	);

	// @for $i from 1 through calendar-variables.$total-columns {
	// 	/* extra 2 for the sibling events wrapper and the self containment */
	// 	$total-cells: calendar-variables.$total-columns * calendar-variables.$total-rows + 2;

	// 	$from: $i * calendar-variables.$total-rows - calendar-variables.$total-rows + 1;
	// 	$less: $total-cells - $i * calendar-variables.$total-rows;

	// 	[role="listitem"i]:nth-child(1n + #{$from}):nth-last-child(1n + #{$less}) {
	// 		--column: #{$i};
	// 	}
	// }
}

.rows {
	display: contents;
	> [role="listitem"i] {
		// background-color: var(#{scheme-variables.$vvd-color-base}, rgb(255, 255, 255));
		position: relative;
		grid-column: 1 / 8;
		grid-row: var(--row);
		min-block-size: 48px;
		pointer-events: none;
		// &::before {
		// 	position: absolute;
		// 	content: counter(listing);
		// 	counter-increment: listing;
		// 	opacity: 0;
		// 	pointer-events: none;
		// }
		&:not(:first-child)::after {
			position: absolute;
			// z-index: 3;
			border-block-end: var(#{scheme-variables.$vvd-color-neutral-20}) 1px solid;
			content: '';
			inline-size: 100%;
			margin-block-start: -1px;
		}

		@for $i from 1 through calendar-variables.$total-rows {
			$current-row: $i * calendar-variables.$fraction - calendar-variables.$fraction + 1;
			&:nth-child(#{calendar-variables.$total-rows}n + #{$i}) {
				--row: #{$current-row} / span #{calendar-variables.$fraction};
			}
		}
	}
}

.columns {
	display: contents;
	> [role="gridcell"i] {
		position: relative;
		grid-column: var(--column);
		grid-row: 1 / #{calendar-variables.$total-rows * calendar-variables.$fraction + 1};
		@for $i from 1 through calendar-variables.$total-columns {
			&:nth-child(#{$i}) {
				--column: #{$i};
			}
		}
		&:not(:first-child)::after {
			position: absolute;
			block-size: 100%;
			// z-index: 3;
			border-inline-end: var(#{scheme-variables.$vvd-color-neutral-20}) 1px solid;
			content: '';
			margin-inline-start: -1px;
		}
	}
}

[role="presentation"i] {
	display: contents;
}
