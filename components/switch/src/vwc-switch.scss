@use 'sass:selector';
@use '@vonage/vvd-design-tokens/build/scss/semantic-variables/_scheme-variables' as scheme-variables;

// sizing parts only
:host {
	border-radius: 16px;

	.mdc-switch,
	.mdc-switch__native-control {
		width: 30px;
		height: 20px;
	}

	.mdc-switch__track {
		width: 100%;
		height: 100%;
		border-radius: 16px;
		border-width: 0;
	}

	.mdc-switch__thumb-underlay {
		top: 0;
		left: 0;
		width: 20px;
		height: 100%;

		.mdc-switch__thumb {
			width: 16px;
			height: 16px;
			border: none;
		}
	}

	.mdc-switch--checked {
		.mdc-switch__thumb-underlay {
			transform: translateX(10px);
		}

		.mdc-switch__native-control {
			transform: translateX(-10px);
		}
	}
}

// ! move to utils as this might be a common
// ! mixin for other components such as call-out
@mixin connotations-context(
  $selector: ':host([connotation-specifier])',
  $default: primary
) {
  $connotations: primary cta success error;

  @each $connotation in $connotations {
    $attr: '[connotation="#{$connotation}"i]';

    $scoped-selector: $selector; // prevents overriding argument

    $scoped-selector: selector.replace(
      #{$selector},
      '[connotation-specifier]',
      #{$attr}
    );

    @if ($connotation == $default) {
      $default-selector: selector.replace(
        #{$selector},
        '[connotation-specifier]',
        ':not([connotation])'
      );
      $scoped-selector: $default-selector, $scoped-selector;
    }

    #{$scoped-selector} {
			--mdc-theme-secondary: var(--vvd-color-#{$connotation}-background);
			--vvd-switch-checked-background-hover: var(--vvd-color-#{$connotation}-background-hover);
		}
  }
}

@include connotations-context(
  ':host([connotation-specifier])'
);

:host([enlarged]) {
	.mdc-switch,
	.mdc-switch__native-control {
		width: 50px;
		height: 32px;
	}

	.mdc-switch__thumb-underlay {
		width: 32px;

		.mdc-switch__thumb {
			width: 24px;
			height: 24px;
		}
	}

	.mdc-switch--checked {
		.mdc-switch__thumb-underlay {
			transform: translateX(18px);
		}

		.mdc-switch__native-control {
			transform: translateX(-18px);
		}
	}
}

// colors/shadowing
:host {
	--vvd-switch-checked-background: var(#{scheme-variables.$vvd-color-primary-background});
	--vvd-switch-checked-background-hover: var(#{scheme-variables.$vvd-color-primary-background});
	--vvd-switch-checked-background-focus: var(#{scheme-variables.$vvd-color-primary-background});

	--vvd-switch-unchecked-background: var(#{scheme-variables.$vvd-color-base-neutral});
	--vvd-switch-unchecked-background-hover: var(#{scheme-variables.$vvd-color-base-neutral});
	--vvd-switch-unchecked-background-focus: var(#{scheme-variables.$vvd-color-base-neutral});

	--vvd-switch-disabled-background: var(#{scheme-variables.$vvd-color-base-soft});
	--vvd-switch-shadow-focus: 0, 0, 0, 0.5;

	--mdc-theme-surface: var(#{scheme-variables.$vvd-color-surface-background}); // unchecked thumb
	--mdc-theme-on-surface: var(--vvd-switch-unchecked-background); // unchecked track

	.mdc-switch {
		.mdc-switch__thumb {
			box-shadow: none;
		}

		&.mdc-switch--checked .mdc-switch__thumb {
			background-color: var(#{scheme-variables.$vvd-color-surface-background});
		}

		&:hover .mdc-switch__thumb {
			opacity: 0.8;
		}

		.mdc-switch__track,
		&.mdc-switch--checked .mdc-switch__track {
			opacity: initial;
		}

		&:hover .mdc-switch__track {
			background-color: var(--vvd-switch-checked-background-hover);
		}

		&:not(.mdc-switch--checked):hover .mdc-switch__track {
			background-color: var(--vvd-switch-unchecked-background-hover);
		}

		&.mdc-switch--disabled {
			opacity: initial;

			.mdc-switch__track {
				opacity: initial;
				background-color: var(--vvd-switch-disabled-background);
			}
		}
	}
}

:host(:not([disabled]):focus-within) {
	.mdc-switch__track {
		box-shadow: 0 0 2px 1px rgba(var(--vvd-switch-shadow-focus));
	}

	.mdc-switch:not(.mdc-switch--checked) {
		.mdc-switch__track {
			background-color: var(--vvd-switch-unchecked-background-focus);
		}

		&:hover .mdc-switch__track {
			background-color: var(--vvd-switch-unchecked-background-hover);
		}
	}
}
