@use 'sass:selector';
@use 'sass:map';
@use '../../functions';
@use 'predefined-connotations';
@use 'variables';

$soft: soft;
$underemphasis: underemphasis;
$accent: accent;

$_connotations-definition: (
	primary: (#{soft}: neutral-20, #{underemphasis}: neutral-40, #{accent}: neutral-30),
	cta: (#{soft}: cta-20, #{underemphasis}: cta-40, #{accent}: cta-60),
	success: (#{soft}: success-20, #{underemphasis}: success-40, #{accent}: success-60),
	alert: (#{soft}: alert-20, #{underemphasis}: alert-40, #{accent}: alert-60),
	warning: (#{soft}: warning-20, #{underemphasis}: warning-40, #{accent}: warning-60),
	info: (#{soft}: info-20, #{underemphasis}: info-40, #{accent}: info-60),
	announcement: (#{soft}: announcement-20, #{underemphasis}: announcement-40, #{accent}: announcement-60)
);

// override to apply relevance
$connotations-set: predefined-connotations.$connotations-set !default;
$selector: variables.$selector !default;

@mixin connotations-shades {
	@each $name, $_ in functions.pick-map($connotations-set, $_connotations-definition) {
		$compound: '[connotation="#{$name}" i]';

		$local-selector: selector.replace(
			#{$selector},
			#{variables.$compound-placeholder},
			#{$compound}
		);

		#{$local-selector} {
			@include connotation-shades-variables($name);
		}
	}
}

@mixin connotations-shades-default($name) {
	$compound: ':not([connotation])';

	$local-selector: selector.replace(
		#{$selector},
		#{variables.$compound-placeholder},
		#{$compound}
	);

	#{$local-selector} {
		@include connotation-shades-variables($name);
	}
}

@mixin connotation-shades-variables($name) {
	$connotation-shades-map: map.get($_connotations-definition, $name);
	@each $key, $value in $connotation-shades-map {
		#{variables.$vvd-color-connotation}-#{$key}: var(--vvd-color-#{$value});
	}
}
