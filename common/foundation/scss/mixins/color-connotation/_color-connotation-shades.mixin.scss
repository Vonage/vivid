@use 'sass:map';

@use '@vonage/vvd-design-tokens/build/scss/semantic-variables/scheme-variables';
@use '../../functions';
@use 'predefined-connotations';
@use 'variables';

$_connotations-definition: (
	primary: (contrast: neutral-90, soft: neutral-20, accent: neutral-30),
	cta: (contrast: cta-90, soft: cta-20, accent: cta-60),
	success: (contrast: success-90, soft: success-20, accent: success-60),
	alert: (contrast: alert-90, soft: alert-20, accent: alert-60),
	warning: (contrast: warning-90, soft: warning-20, accent: warning-60),
	info: (contrast: info-90, soft: info-20, accent: info-60),
	announcement: (contrast: announcement-90, soft: announcement-20, accent: announcement-60),
	pacific: ('': linear-gradient(to right, var(#{scheme-variables.$vvd-color-info-30}), var(#{scheme-variables.$vvd-color-cta-70}))),
);

// override to apply relevance
$connotations-set: predefined-connotations.$connotations-set !default;
$selector: variables.$selector !default;

$connotation-variable: #{variables.$vvd-color-connotation} !default;

@mixin parse-connotation-shades($connotation-shades-list) {
	@each $name, $value in $connotation-shades-list {
		#{$connotation-variable}-#{$name}: var(--vvd-color-#{$value});
	}
}

@mixin connotations-shades {
	@each $connotation, $connotation-shades-list in functions.pick-map($connotations-set, $_connotations-definition) {
		$compound: '[connotation="#{$connotation}" i]';

		#{functions.get-local-selector($selector, variables.$compound-placeholder, $compound)} {
			@include parse-connotation-shades($connotation-shades-list);
		}
	}
}

@mixin connotations-shades-default($name) {
	$compound: '';

	@each $connotation, $_ in functions.pick-map($connotations-set, $_connotations-definition) {
		@if $name != $connotation {
			$compound: $compound + ':not([connotation="#{$connotation}"i])';
		}
	}

	#{functions.get-local-selector($selector, variables.$compound-placeholder, $compound)} {
		@include parse-connotation-shades(map.get($_connotations-definition, $name));
	}
}
