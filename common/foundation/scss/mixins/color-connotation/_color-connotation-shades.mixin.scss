@use 'sass:selector';
@use 'sass:map';
@use '../../functions';
@use 'predefined-connotations';
@use 'variables';

$_connotations-definition: (
	primary: (soft: neutral-20, accent: neutral-30),
	cta: (soft: cta-20, accent: cta-60),
	success: (soft: success-20, accent: success-60),
	alert: (soft: alert-20, accent: alert-60),
	warning: (soft: warning-20, accent: warning-60),
	info: (soft: info-20, accent: info-60),
	announcement: (soft: announcement-20, accent: announcement-60)
);

// override to apply relevance
$connotations-set: predefined-connotations.$connotations-set !default;
$selector: variables.$selector !default;

$connotation-variable: #{variables.$vvd-color-connotation} !default;

@mixin parse-connotation-shades($connotation-shades-list) {
	@each $name, $value in $connotation-shades-list {
		#{$connotation-variable}-#{$name}: var(--vvd-color-#{$value});
	}
}

@mixin connotations-shades {
	@each $connotation, $connotation-shades-list in functions.pick-map($connotations-set, $_connotations-definition) {
		$compound: '[connotation="#{$connotation}" i]';

		#{functions.get-local-selector($selector, variables.$compound-placeholder, $compound)} {
			@include parse-connotation-shades($connotation-shades-list);
		}
	}
}

@mixin connotations-shades-default($name) {
	@each $connotation in functions.pick-map($connotations-set, $_connotations-definition) {
		@if $name != $connotation {
			$compound: ':not([connotation="#{$connotation}"i])';
		
			#{functions.get-local-selector($selector, variables.$compound-placeholder, $compound)} {
				@include parse-connotation-shades(map.get($_connotations-definition, $name));
			}
		}
	}
}
