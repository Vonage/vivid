@use './color-connotation' as color-connotation;
@use '../functions' as functions;

// override to apply relevance
$layouts: filled outlined outlined-duotone soft text ghost !default;

$variable-prefix: --layout !default;

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
$all-layouts: (
	filled: 'filled',
	outlined: 'outlined',
	outlined-duotone: 'outlined-duotone',
	soft: 'soft',
	text: 'text',
	ghost: 'ghost',
);

%filled {
	#{$variable-prefix}--fill: var(#{color-connotation.$vvd-color-connotation});
	#{$variable-prefix}--text: var(#{color-connotation.$vvd-color-on-connotation});
}

%outlined {
	#{$variable-prefix}--fill: transparent;
	#{$variable-prefix}--outline: 1px solid var(#{color-connotation.$vvd-color-connotation});
	#{$variable-prefix}--text: var(#{color-connotation.$vvd-color-connotation});
}

%outlined-duotone {
	#{$variable-prefix}--fill: transparent;
	#{$variable-prefix}--outline: 1px solid var(#{color-connotation.$vvd-color-connotation});
	#{$variable-prefix}--text: var(#{color-connotation.$vvd-color-connotation}--contrast);
}

%soft {
	#{$variable-prefix}--fill: var(#{color-connotation.$vvd-color-connotation}--soft);
	#{$variable-prefix}--text: var(#{color-connotation.$vvd-color-connotation}--contrast);
}

%text,
%ghost {
	#{$variable-prefix}--fill: transparent;
	#{$variable-prefix}--text: var(#{color-connotation.$vvd-color-connotation});
}

@mixin layout() {
	@each $layout in functions.pick-list($layouts, $all-layouts) {
		#{':host([layout="#{$layout}"i])'} {
			@extend %#{$layout};
		}
	}
}

@mixin layout-default($name) {
	$coumpund: '';

	@each $layout in functions.pick-list($layouts, $all-layouts) {
		@if $name != $layout {
			$coumpund: $coumpund + ':not([layout="#{$layout}"i])';
		}
	}

	:host($coumpund) {
		@extend %#{$name};
	}
}
