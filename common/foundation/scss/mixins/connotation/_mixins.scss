@use 'sass:map';
@use 'sass:list';
@use 'sass:selector';
@use '../../functions' as functions;
@use 'config' as config;
@use 'variables' as variables;


@mixin connotation-base($type) {
	#{variables.$vvd-color-connotation}: var(--vvd-color-#{$type});
	#{variables.$vvd-color-on-connotation}: var(--vvd-color-on-#{$type});
}

@mixin connotation-shades($mapping) {
	$shades: functions.pick-map(config.$shades, $mapping);
	@each $name, $value in $shades {
		#{variables.$vvd-color-connotation}-#{$name}: var(#{$value});
	}
}

@mixin connotation-decorative($mapping) {
	$start: map.get($mapping, start);
	$end: map.get($mapping, end);
	#{variables.$vvd-color-connotation}: linear-gradient(to right, $start, $end);
}

@function get-typed-selector($type) {
	@if config.$is-host {
		@return '[connotation="#{$type}"i]';
	} @else {
		@return '.#{config.get-scope-prefix()}connotation-#{$type}';
	}
}

@mixin selectors($types...) {
	@each $type in $types {
		$typed-selector: get-typed-selector($type);
		$selector: '';
		// backwards compatability on components aren't yet structured with base wrapper
		@if config.$is-host {
			$selector: selector.parse('#{&}(#{$typed-selector})');
		} @else {
			$selector: selector.unify(&, $typed-selector);
		}

		$all-connotation-types: map.keys(
			map.merge(
				functions.pick-map(config.$decoratives, variables.$connotation-mapping-decoratives),
				functions.pick-map(config.$connotations-set, variables.$connotation-mapping)
			)
		);

		@if $type == config.$default and list.length($all-connotation-types) > 1 {
			$rule-out-typed-selector: '';
			// backwards compatability on components aren't yet structured with base wrapper
			@if config.$is-host {
				$rule-out-typed-selector: ':host(';
			} @else {
				$rule-out-typed-selector: &;
			}
			@each $rule-out-type in $all-connotation-types {
				@if $rule-out-type != config.$default {
					$rule-out-typed-selector: '#{$rule-out-typed-selector}:not(#{get-typed-selector($rule-out-type)})';
				}
			}
			// backwards compatability on components aren't yet structured with base wrapper
			@if config.$is-host { $rule-out-typed-selector: $rule-out-typed-selector ')'; }
			$selector: selector.parse(#{$selector, $rule-out-typed-selector});
		}

		@at-root #{$selector} {
			@content($type);
		}
	}
}

@mixin connotation {
	$mapping-shades: functions.pick-map(config.$connotations-set, variables.$connotation-mapping);
	$mapping-decoratives: functions.pick-map(config.$decoratives, variables.$connotation-mapping-decoratives);

	$all-connotation-types: map.keys(map.merge($mapping-shades, $mapping-decoratives));

	@include selectors(map.keys($mapping-shades)...) using ($connotation-type) {
		@include connotation-base($connotation-type);
		@include connotation-shades(map.get($mapping-shades, $connotation-type));
	}

	@include selectors(map.keys($mapping-decoratives)...) using ($connotation-type) {
		@include connotation-decorative(map.get($mapping-decoratives, $connotation-type));
	}
}
