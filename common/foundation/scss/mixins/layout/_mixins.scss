@use '../connotation' as connotation;
@use '../../functions' as functions;
@use 'variables' as variables;
@use 'config' as config;
@use 'sass:selector';
@use 'sass:list';


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
$all-layouts: (
	filled: 'filled',
	outlined: 'outlined',
	soft: 'soft',
	text: 'text',
	ghost: 'ghost',
);

%filled {
	#{variables.$vvd-layout-color-fill}: var(#{connotation.$vvd-color-connotation});
	#{variables.$vvd-layout-color-text}: var(#{connotation.$vvd-color-on-connotation});
}

%outlined {
	#{variables.$vvd-layout-color-fill}: transparent;
	#{variables.$vvd-layout-color-outline}: var(#{connotation.$vvd-color-connotation});
	@if (config.$outline-duotone) {
		#{variables.$vvd-layout-color-text}: var(#{connotation.$vvd-color-connotation}-contrast);
	} @else {
		#{variables.$vvd-layout-color-text}: var(#{connotation.$vvd-color-connotation}-diverse);
	}
}

%soft {
	#{variables.$vvd-layout-color-fill}: var(#{connotation.$vvd-color-connotation}-soft);
	#{variables.$vvd-layout-color-text}: var(#{connotation.$vvd-color-connotation}-contrast);
}

%text,
%ghost {
	#{variables.$vvd-layout-color-fill}: transparent;
	#{variables.$vvd-layout-color-text}: var(#{connotation.$vvd-color-connotation});
}

@function get-typed-selector($type) {
	@return '.#{config.get-scope-prefix()}layout-#{$type}';
}

@mixin layout {
	$layout-set: functions.pick-list(config.$layout-set, config.$predefined-layout-set);

	@each $type in $layout-set {
		$typed-selector: get-typed-selector($type);

		$selector: selector.unify(&, $typed-selector);

		@if $type == config.$default and list.length($layout-set) > 1 {
			$rule-out-typed-selector: &;
			@each $rule-out-type in $layout-set {
				@if $rule-out-type != config.$default {
					$rule-out-typed-selector: '#{$rule-out-typed-selector}:not(#{get-typed-selector($rule-out-type)})';
				}
			}
			$selector: selector.parse(#{$selector, $rule-out-typed-selector});
		}

		@at-root #{$selector} {
			@extend %#{$type};
		}
	}
}
