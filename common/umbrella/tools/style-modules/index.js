#!/usr/bin/env node
const
	fp = require('lodash/fp'),
	glob = require('glob'),
	kefir = require('kefir'),
	parseArgs = require('minimist'),
	{ writeFile } = require('fs'),
	{ join: joinPath, extname: getExtension, basename: getBase, dirname: getDir } = require('path'),
	{ render: renderSass } = require('sass');

const DEFAULT_SOURCE = "./src/**/*.s[ac]ss";

const {
	path: basePath = ".",
	source: sourcePattern = DEFAULT_SOURCE
} = parseArgs(process.argv.slice(2));

console.time('Total');

const
	fileStreamFromGlob = (path)=> kefir.fromNodeCallback(fp.partial(glob, [path])).flatten(),
	tsTemplate = (css)=> [
		"// autogenerated module",
		"import {css} from 'lit-element';",
		["export const style = css`", css, "`;"].join('')
	].join('\n'),
	prefixWith = (path)=> (pre)=> joinPath(...[getDir(path), [pre, getBase(path)].join('')]),
	suffixWith = (path)=> (suf)=> joinPath(...[getDir(path), [getBase(path), suf].filter(Boolean).join('.')]);

fileStreamFromGlob(joinPath(process.cwd(), basePath, sourcePattern))
	.flatMapConcat((sassFile)=> {
		return kefir.fromNodeCallback((cb)=>
			renderSass({
				importer: (path, prev, done)=> {
					kefir
						.concat(
							[
								[path, "_index.scss"].join('/'),
								...["", "_"]
									.map(prefixWith(path))
									.flatMap((basePath)=> ["", "scss", "sass"].map(suffixWith(basePath)))
							].map((probePath)=> kefir.fromNodeCallback((cb) => {
								const res = fp.attempt(() => require.resolve(probePath));
								cb(fp.isError(res) && res, res);
							}))
						)
						.ignoreErrors()
						.map((outPath)=> ({ file: outPath }))
						.beforeEnd(fp.noop)
						.take(1)
						.onValue(done);
				},
				file: sassFile,
				outputStyle: "compressed"
			}, cb)
		)
		.map(({ css })=> ({
			sass_path: sassFile,
			css_content: css.toString()
		}));
	})
	.map(({ css_content, sass_path })=> ({
			module_path: joinPath(...[getDir(sass_path), [getBase(sass_path, getExtension(sass_path)), 'css.ts'].join('.')]),
			module_content: tsTemplate(css_content),
		})
	)
	.flatMap(({ module_path, module_content })=>
		kefir
			.fromNodeCallback((cb)=>writeFile(module_path, module_content, cb))
			.map(()=> ` âœ” ${module_path}`)
	)
	.takeErrors(1)
	.onValue(console.log)
	.onEnd(()=> console.timeEnd('Total'))
	.onError((err)=>{
		console.warn(err);
		process.exit(1);
	});
