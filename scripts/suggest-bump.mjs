/**
 * CLI utility to suggest the next Vivid version based on conventional commits since last release (tag)
 *
 * - uses `standard-version` library as engine
 * - uses `lerna.json` as base version
 * - result (next version) is printed to the stdout
 */
import fs from 'fs';
import standardVersion from 'standard-version';

//	execution
//
main();

//	definitions
//
async function main() {
	const TMP_VERSION_HOLDER = 'autogenerated.version.json';
	const CURRENT_VERSION_SOURCE = 'lerna.json';

	fs.writeFileSync(TMP_VERSION_HOLDER, JSON.stringify({}), { encoding: 'utf-8' });
	try {
		await injectVersion(TMP_VERSION_HOLDER, CURRENT_VERSION_SOURCE);
		const result = extractVersion(TMP_VERSION_HOLDER);
		console.log(result);
	} finally {
		fs.unlinkSync(TMP_VERSION_HOLDER);
	}
}

async function injectVersion(tmpTarget, verSource) {
	return standardVersion({
		bumpFiles: [{ filename: tmpTarget, type: 'json' }],
		packageFiles: [{ filename: verSource, type: 'json' }],
		dryRun: false,
		silent: true,
		skip: { changelog: true, commit: true, tag: true }
	});
}

function extractVersion(tmpVersionHolder) {
	const tmpVersionHolderRaw = fs.readFileSync(tmpVersionHolder, { encoding: 'utf-8' });
	return JSON.parse(tmpVersionHolderRaw).version;
}